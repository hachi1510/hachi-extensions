name: Build and Deploy to GitHub Pages

on:
  push:
    branches: [main]
    paths:
      - "*/package.json"
      - ".github/workflows/build-and-deploy.yml"
      - "template.html"

  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Find all package.json files
        id: find-package-json
        run: echo "packages=$(find . -name 'package.json' -not -path '*/node_modules/*' -not -path '*/.github/*' -exec dirname {} \; | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> $GITHUB_OUTPUT

      - name: Install dependencies and build for each project
        run: |
          mkdir -p ./build-output
          for dir in $(echo '${{ steps.find-package-json.outputs.packages }}' | jq -r '.[]'); do
            echo "Building project in $dir"
            cd $dir
            # Usa npm install invece di npm ci se package-lock.json non esiste
            if [ -f "package-lock.json" ]; then
              npm ci
            else
              npm install
            fi
            npm run build
            
            OUTPUT_DIR=""
            if [ -d "dist" ]; then
              OUTPUT_DIR="dist"
            elif [ -d "build" ]; then
              OUTPUT_DIR="build"
            elif [ -d "_site" ]; then
              OUTPUT_DIR="_site"
            else
              echo "No output directory found in $dir, skipping"
              cd $GITHUB_WORKSPACE
              continue
            fi
            
            PROJECT_NAME=$(basename $dir)
            mkdir -p $GITHUB_WORKSPACE/build-output/$PROJECT_NAME
            cp -r $OUTPUT_DIR/* $GITHUB_WORKSPACE/build-output/$PROJECT_NAME/
            
            cd $GITHUB_WORKSPACE
          done

      - name: Create index page with manifest information
        run: |
          # Create a temporary file for the extension list
          TEMP_LIST_FILE=$(mktemp)
          TODAY_DATE=$(date '+%d %B %Y')
          
          # Generate extension list in a separate file
          cd build-output
          for dir in */; do
            if [ "$dir" != "index.html" ]; then
              project=${dir%/}
              FULL_URL="https://$(echo $GITHUB_REPOSITORY | cut -d'/' -f1).github.io/$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)/$project/"
              
              MANIFEST_PATH="$project/manifest.json"
              
              if [ -f "$MANIFEST_PATH" ]; then
                NAME=$(jq -r '.name // "'$project'"' "$MANIFEST_PATH")
                DESCRIPTION=$(jq -r '.description // "No description available"' "$MANIFEST_PATH")
              else
                NAME="$project"
                DESCRIPTION="No description available"
              fi
              
              # Append to temporary file
              echo "              <li>" >> $TEMP_LIST_FILE
              echo "                <span class='project-name'>$NAME</span>" >> $TEMP_LIST_FILE
              echo "                <p class='project-description'>$DESCRIPTION</p>" >> $TEMP_LIST_FILE
              echo "                <a href='teeviapp:///extensions?install=$FULL_URL' target='_blank' rel='noopener noreferrer' class='install-btn'>Install Extension</a>" >> $TEMP_LIST_FILE
              echo "              </li>" >> $TEMP_LIST_FILE
            fi
          done
          
          # Read the template file
          cat $GITHUB_WORKSPACE/template.html > index.html.new
          
          # Replace the placeholders using awk instead of sed
          awk -v list="$(cat $TEMP_LIST_FILE)" -v date="$TODAY_DATE" '{
            gsub(/<!-- EXTENSION_LIST_PLACEHOLDER -->/, list);
            gsub(/<!-- DATE_PLACEHOLDER -->/, date);
            print;
          }' index.html.new > index.html
          
          # Remove temporary files
          rm index.html.new $TEMP_LIST_FILE

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./build-output"

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
